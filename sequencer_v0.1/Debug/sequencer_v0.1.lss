
sequencer_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001278  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000873  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000828  00000000  00000000  00001de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000498  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000deb  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  9e:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_WriteData>:
    LCD_WriteData('-');
	val = ~val+1;
  }
  else LCD_WriteData(' ');
  LCD_PrDec( val );
}
  a6:	40 9a       	sbi	0x08, 0	; 8
  a8:	9a e1       	ldi	r25, 0x1A	; 26
  aa:	9a 95       	dec	r25
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_WriteData+0x4>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_WriteData+0xa>
  b0:	98 b1       	in	r25, 0x08	; 8
  b2:	28 2f       	mov	r18, r24
  b4:	26 95       	lsr	r18
  b6:	26 95       	lsr	r18
  b8:	2c 73       	andi	r18, 0x3C	; 60
  ba:	93 7c       	andi	r25, 0xC3	; 195
  bc:	92 2b       	or	r25, r18
  be:	98 b9       	out	0x08, r25	; 8
  c0:	9a e1       	ldi	r25, 0x1A	; 26
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_WriteData+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_WriteData+0x22>
  c8:	41 9a       	sbi	0x08, 1	; 8
  ca:	9a e1       	ldi	r25, 0x1A	; 26
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_WriteData+0x26>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_WriteData+0x2c>
  d2:	41 98       	cbi	0x08, 1	; 8
  d4:	9a e1       	ldi	r25, 0x1A	; 26
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_WriteData+0x30>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_WriteData+0x36>
  dc:	98 b1       	in	r25, 0x08	; 8
  de:	88 0f       	add	r24, r24
  e0:	88 0f       	add	r24, r24
  e2:	8c 73       	andi	r24, 0x3C	; 60
  e4:	93 7c       	andi	r25, 0xC3	; 195
  e6:	89 2b       	or	r24, r25
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	8a e1       	ldi	r24, 0x1A	; 26
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_WriteData+0x46>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_WriteData+0x4c>
  f2:	41 9a       	sbi	0x08, 1	; 8
  f4:	9a e1       	ldi	r25, 0x1A	; 26
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_WriteData+0x50>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_WriteData+0x56>
  fc:	41 98       	cbi	0x08, 1	; 8
  fe:	81 e2       	ldi	r24, 0x21	; 33
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_WriteData+0x5a>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <LCD_WriteCString>:
  LCD_WriteData((val % 10) + 0x30);
}

// ===========================================================================
void LCD_WriteCString(const char* retezec) // vypise konstantni retezec
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
  while(*retezec != '\0')
 10e:	88 81       	ld	r24, Y
 110:	88 23       	and	r24, r24
 112:	31 f0       	breq	.+12     	; 0x120 <LCD_WriteCString+0x18>
 114:	21 96       	adiw	r28, 0x01	; 1
  {
    LCD_WriteData(*retezec);
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_WriteData>
}

// ===========================================================================
void LCD_WriteCString(const char* retezec) // vypise konstantni retezec
{
  while(*retezec != '\0')
 11a:	89 91       	ld	r24, Y+
 11c:	81 11       	cpse	r24, r1
 11e:	fb cf       	rjmp	.-10     	; 0x116 <LCD_WriteCString+0xe>
  {
    LCD_WriteData(*retezec);
	retezec +=1;
  }
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <setup>:
	_delay_ms(15);
	PORTB |= (1<<4);            // switch supply	
}

void sequence2()
{
 126:	25 9a       	sbi	0x04, 5	; 4
 128:	08 95       	ret

0000012a <main>:



int main(void)
{
    setup();
 12a:	0e 94 93 00 	call	0x126	; 0x126 <setup>
		 else if (PTT==0)
		 {
			 sequence2();
			 x==0;
		 }*/
		 LCD_WriteCString("ahoj");
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WriteCString>
		 PORTB |= (1<<5);
 136:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 e6       	ldi	r24, 0x69	; 105
 13c:	98 e1       	ldi	r25, 0x18	; 24
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x14>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x1e>
 148:	00 00       	nop
		 _delay_ms(500);
		 PORTB &= (1<<5);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	80 72       	andi	r24, 0x20	; 32
 14e:	85 b9       	out	0x05, r24	; 5
 150:	ee cf       	rjmp	.-36     	; 0x12e <main+0x4>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
